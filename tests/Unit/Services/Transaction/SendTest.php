<?php

declare(strict_types=1);

namespace Tests\Unit\Services\Transaction;

use App\Exceptions\TransactionException;
use App\Jobs\ClientNotification;
use App\Repositories\TransactionRepositoryInterface;
use App\Repositories\UserRepositoryInterface;
use App\Repositories\WalletRepositoryInterface;
use App\Services\Authorization\AuthorizationServiceInterface;
use App\Services\Transaction\Send;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;

/**
 * Class SendTest
 *
 * @package Tests\Unit\Services\Transaction
 */
class SendTest extends TestCase
{

    /**
     * @var TransactionRepositoryInterface
     */
    private $transactionRepository;

    /**
     * @var UserRepositoryInterface
     */
    private $userRepository;

    /**
     * @var  WalletRepositoryInterface
     */
    private $walletRepository;

    /**
     * @var AuthorizationServiceInterface
     */
    private $authorizationService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->transactionRepository = $this->mock(TransactionRepositoryInterface::class);
        $this->userRepository = $this->mock(UserRepositoryInterface::class);
        $this->walletRepository = $this->mock(WalletRepositoryInterface::class);
        $this->authorizationService = $this->mock(AuthorizationServiceInterface::class);
    }

    public function testShouldBeUserForUserNotPermitted(): void
    {
        $this->transactionRepository->shouldReceive('create')
            ->andReturn(
                [
                    'id' => '243242'
                ]
            );

        $this->transactionRepository->shouldReceive('update')
            ->with('243242', ['status' => 'ERROR'])
            ->andReturnTrue();

        $sendService = new Send(
            $this->transactionRepository,
            $this->walletRepository,
            $this->userRepository,
            $this->authorizationService
        );

        $this->expectException(TransactionException::class);
        $sendService->handle(['payer_id' => '1', 'payee_id' => '1', 'value' => 2]);
    }

    public function testShouldBeUserBalanceIsInsufficient(): void
    {
        $this->transactionRepository->shouldReceive('create')
            ->andReturn(
                [
                    'id' => '243242'
                ]
            );

        $this->transactionRepository->shouldReceive('update')
            ->with('243242', ['status' => 'ERROR'])
            ->andReturnTrue();

        $this->walletRepository->shouldReceive('getBalance')
            ->with('1')
            ->andReturn(-1);


        $sendService = new Send(
            $this->transactionRepository,
            $this->walletRepository,
            $this->userRepository,
            $this->authorizationService
        );

        $this->expectException(TransactionException::class);
        $sendService->handle(['payer_id' => '1', 'payee_id' => '2', 'value' => 2]);
    }

    public function testShouldBeUserAmountMoreBalance(): void
    {
        $this->transactionRepository->shouldReceive('create')
            ->andReturn(
                [
                    'id' => '243242'
                ]
            );

        $this->transactionRepository->shouldReceive('update')
            ->with('243242', ['status' => 'ERROR'])
            ->andReturnTrue();

        $this->walletRepository->shouldReceive('getBalance')
            ->with('1')
            ->andReturn(100);


        $sendService = new Send(
            $this->transactionRepository,
            $this->walletRepository,
            $this->userRepository,
            $this->authorizationService
        );

        $this->expectException(TransactionException::class);
        $sendService->handle(['payer_id' => '1', 'payee_id' => '2', 'value' => 100.1]);
    }


    public function testShouldBeUserPersonTypeJ(): void
    {
        $this->transactionRepository->shouldReceive('create')
            ->andReturn(
                [
                    'id' => '243242'
                ]
            );

        $this->transactionRepository->shouldReceive('update')
            ->with('243242', ['status' => 'ERROR'])
            ->andReturnTrue();

        $this->walletRepository->shouldReceive('getBalance')
            ->with('1')
            ->andReturn(100);


        $this->userRepository->shouldReceive('get')->with('1')
            ->andReturn(['type_person' => 'J']);


        $sendService = new Send(
            $this->transactionRepository,
            $this->walletRepository,
            $this->userRepository,
            $this->authorizationService
        );

        $this->expectException(TransactionException::class);
        $sendService->handle(['payer_id' => '1', 'payee_id' => '2', 'value' => 1]);
    }

    public function testShouldBeAuthorizationIsFalse(): void
    {
        $this->transactionRepository->shouldReceive('create')
            ->andReturn(
                [
                    'id' => '243242'
                ]
            );

        $this->transactionRepository->shouldReceive('update')
            ->with('243242', ['status' => 'ERROR'])
            ->andReturnTrue();

        $this->walletRepository->shouldReceive('getBalance')
            ->with('1')
            ->andReturn(100);


        $this->userRepository->shouldReceive('get')->with('1')
            ->andReturn(['type_person' => 'F']);

        $this->authorizationService->shouldReceive('isAuthorized')->andReturnFalse();

        $sendService = new Send(
            $this->transactionRepository,
            $this->walletRepository,
            $this->userRepository,
            $this->authorizationService
        );

        $this->expectException(TransactionException::class);
        $sendService->handle(['payer_id' => '1', 'payee_id' => '2', 'value' => 1]);
    }

    public function testShouldBeTransactionSuccess(): void
    {
        $this->transactionRepository->shouldReceive('create')
            ->andReturn(
                [
                    'id' => '243242'
                ]
            );

        $this->transactionRepository->shouldReceive('update')
            ->with('243242', ['status' => 'DONE'])
            ->andReturnTrue();

        $this->walletRepository->shouldReceive('getBalance')
            ->with('1')
            ->andReturn(100);

        $this->walletRepository->shouldReceive('insert')
            ->with(1, -1);

        $this->walletRepository->shouldReceive('insert')
            ->with(2, 1);

        $this->userRepository->shouldReceive('get')->with('1')
            ->andReturn(['type_person' => 'F']);

        $this->authorizationService->shouldReceive('isAuthorized')->andReturnTrue();

        Queue::fake();
        $sendService = new Send(
            $this->transactionRepository,
            $this->walletRepository,
            $this->userRepository,
            $this->authorizationService
        );

        $result = $sendService->handle(['payer_id' => '1', 'payee_id' => '2', 'value' => 1]);
        Queue::assertPushed(ClientNotification::class, 1);

        self::assertEquals(['message' => "transfer is success"], $result);
    }
}